@page "/ShoppingCart"
@inject CartService CartService
@inject IHttpClientFactory HttpClientFactory
@using GamesCorner.Shared.Dtos
@using GamesCorner.Client.Services.CartService
@using GamesCorner.Shared.DTOs

<div class="progressbar">
    <div class="circle1"></div>
    <div class="content1">Shopping Cart</div>
    <div class="line"></div>
    <div class="circle2"></div>
    <div class="content1">Order confirmation</div>
</div>

<div class="container">
    <div class="row">
        @foreach (var cartItem in cartItems)
        {
            <div class="col-8">
                <h4>Cart</h4>
                <div class="card m-3">
                    <div class="row">
                        <div class="col-4">
                            <img src="@cartItem.Product.ImageUrl" class="card-img" alt="@cartItem.Product.Name">
                        </div>
                        <div class="col-4 d-block">
                            <div class="card-body">
                                <h5 class="card-title">@cartItem.Product.Name</h5>
                                <i class="oi oi-trash"><button class="btn"></button></i>
                                <p class="card-text">@cartItem.Product.Price kr</p>
                            </div>
                        </div>
                        <div class="col-4 d-flex float-end">
                            <button class="btn btn-white text-black" onclick="@UpdateQuantity(cartItem, +1)">
                                <i class="oi oi-plus"></i>
                            </button>
                            <div>@cartItem.Amount</div>
                            <button class="btn btn-white text-black" onclick="@UpdateQuantity(cartItem, -1)">
                                <i class="oi oi-minus"></i>
                            </button>
                        </div>

                    </div>
                </div>
            </div>
            <div class="col-4">
                <h4>Summary</h4>
                <div class="card m-3 d-block">
                    <div class=" card-body d-flex justify-content-between">
                        <h6>Total</h6>
                        <h4>@Math.Round(cartItem.Amount * cartItem.Product.Price),2 kr</h4>
                    </div>
                    <button class="btn checkout-button text-white">Go to payment ></button>
                    <div class="d-flex">
                        <hr/>
                        <h6>or</h6>
                        <hr/>
                    </div>
                    <a href="/" class="text-white fs-6">Continue shopping</a>
                </div>
            </div>
        }
    </div>
    <div class="row">
        <h4>Recommended</h4>
    </div>
</div>


@code {

    public List<OrderItemDto> orderItems { get; set; } = new();
    private List<CartProductDto> cartItems { get; } = new();
    protected override async Task OnInitializedAsync()
    {
        orderItems = await CartService.GetCartItems();
        var client = HttpClientFactory.CreateClient("public");
        foreach (var orderItem in orderItems)
        {
            cartItems.Add(new CartProductDto()
                {
                    Amount = orderItem.Amount,
                    Id = orderItem.Id,
                    Product = await client.GetFromJsonAsync<ProductModelDto>($"{client.BaseAddress}?Id={orderItem.ProductId}")
                });
        }
    }

    private async Task UpdateQuantity(CartProductDto dto, int number)
    {
        foreach (var cartItem in cartItems)
        {
            if (cartItem.Id == dto.Product.Id)
            {
                var orderItemTemp = new OrderItemDto()
                {
                    Amount = cartItem.Amount,
                    Id = cartItem.Id,
                    ProductId = cartItem.Product.Id
                };

                if (cartItem.Amount - 1 == 0)
                {
                    
                    await CartService.DeleteItem(orderItemTemp);
                    orderItems.Remove(orderItemTemp);
                    cartItems.Remove(cartItem);
                    break;
                }
                cartItem.Amount += number;
                orderItems.FirstOrDefault(o => o.Id.Equals(cartItem.Id)).Amount++;
                await CartService.AddToCart(orderItemTemp, await CartService.GetUserId());
            }
        }
    }

}