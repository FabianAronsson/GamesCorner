@page "/admin/dashboard/manage/orders"
@using Microsoft.AspNetCore.Authorization

@using GamesCorner.Shared.Dtos
@using MudBlazor
@inject HttpClient httpClient
@attribute [Authorize(Roles = "Administrator")]

<div style="background: white">
    <MudDataGrid MultiSelection="true" Items="@Orders" Filterable="true"
                 Hideable="true" Groupable="true" GroupExpanded="false" GroupClassFunc="GroupClassFunc">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Orders</MudText>
            <MudSpacer />
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" Filterable="false" Groupable="false" Sortable="false" />
            <PropertyColumn Property="x => x.CustomerEmail" Filterable="false" Groupable="false" Sortable="false"/>
            <PropertyColumn Property="x => x.PurchaseDate" Filterable="false" Groupable="false" Sortable="false"/>
            <PropertyColumn Property="x => x.IsActive" Filterable="false" Groupable="false" Sortable="false" />
            <PropertyColumn Property="x => x.OrderStatus" Title="Category"  Filterable="false" Sortable="false" Grouping GroupBy="@_groupBy">
                <GroupTemplate>
                    <span style="font-weight:bold">Group: @context.Grouping.Key <MudChip Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small">total @context.Grouping.Count()</MudChip></span>
                </GroupTemplate>
            </PropertyColumn>
            <TemplateColumn Filterable="false" Groupable="false" Sortable="false">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Hire</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="OrderDto" />
        </PagerContent>
    </MudDataGrid>
</div>
@code {
    IEnumerable<OrderDto> Orders = new List<OrderDto>();
    bool _customizeGroupTemplate;
    static bool _customizeGroupBy;
    Func<OrderDto, object> _groupBy = x =>
    {
        //if (_customizeGroupBy)
        //    return _nonmetals.Contains(x.) ? "Nonmetal":  "Metal";
        return x.OrderStatus;
    };

    private string GroupClassFunc(GroupDefinition<OrderDto> item)
    {
        return item.Grouping.Key?.ToString() == "Nonmetal" || item.Grouping.Key?.ToString() == "Other"
            ? "mud-theme-warning"
            : string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        Orders = await httpClient.GetFromJsonAsync<List<OrderDto>>("getAllOrders");

    }



}
