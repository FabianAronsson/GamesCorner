@page "/admin/dashboard/manage/products"
@inject HttpClient Http
@inject NavigationManager UriHelper
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using GamesCorner.Shared.DTOs
@using GamesCorner.Client.Services.AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService AuthService
@attribute [Authorize(Roles = "Administrator")]
<PageTitle>Product Manager</PageTitle>



<EditForm Model="@SelectedProduct" OnSubmit="@UpdateProduct">
	<div class="my-1 row d-flex justify-content-center align-items-center">
		<div class="col-sm-6 col-lg-3 col-md-6 col-xl-3 m-1 ">
			<label for="id">Id:</label> <br>
			<InputText id="id" type="input" class="" @bind-Value="SelectedProduct.Id" placeholder="Id" disabled />
		</div>
		<div class="col-sm-6 col-lg-3 col-md-6 col-xl-3 m-1">
			<label for="name">Name:</label> <br>
			<InputText id="name" type="input" class="form-input" @bind-Value="SelectedProduct.Name" placeholder="Name" required />
		</div>
		<div class="col-sm-6 col-lg-3 col-md-6 col-xl-3 m-1">
			<label for="description">Description:</label> <br>
			<InputText id="description" type="input" class="form-input" @bind-Value="SelectedProduct.Description" placeholder="Description" required />
		</div>
		<div class="col-sm-6 col-lg-3 col-md-6 col-xl-3 m-1">
			<label for="category">Category:</label> <br>
			<InputText id="category" type="input" class="form-input" @bind-Value="SelectedProduct.Category" placeholder="Category" required />
		</div>
		<div class=" col-sm-6 col-lg-3 col-md-6 col-xl-3 m-1">
			<label for="price">Price</label> <br>
			<InputNumber id="price" type="input" class="form-input" @bind-Value="SelectedProduct.Price" placeholder="Price" required />
		</div>
		<div class=" col-sm-6 col-lg-3 col-md-6 col-xl-3 m-1">
			<label for="active">In use</label> <br>
			<InputCheckbox id="active" type="input" class="form-input" @bind-Value="SelectedProduct.InStock" placeholder="In use" />
		</div>
		<div class="col-sm-6 col-lg-3 col-md-6 col-xl-3 m-1">
			<label for="imageUrl">Image Url:</label> <br>
			<InputText id="imageUrl" type="input" class="form-input" @bind-Value="SelectedProduct.ImageUrl" placeholder="Image Url" required />
		</div>
		<div class="col-sm-6 col-lg-3 col-md-6 col-xl-3 m-1">
			<label for="imageUrl">Banner-Image Url:</label> <br>
			<InputText id="BannerimageUrl" type="input" class="form-input" @bind-Value="SelectedProduct.BannerUrl" placeholder="Image Url" required />
		</div>
		<div class="d-flex justify-content-center align-items-center my-3">
			<button type="button" class="btn btn-danger mx-2" @onclick="@(ResetValues)">Reset values</button>
			<button class="btn btn-success mx-2" type="submit">@EditStatus</button>
		</div>
	</div>
	</EditForm>

<div class="my-2 d-flex justify-content-center flex-column align-items-center">
	<div class="inline-block mr-4 my-1">
		<input class="form-input" type="search" autofocus @bind="SearchQuery" @bind:event="oninput" placeholder="Name..." />
	</div>

	<div class="inline-block my-1 text-white">
		Total: <strong>@numResults results found</strong>
	</div>
</div>
<div class="grid d-flex justify-content-center" tabindex="-1">
	<QuickGrid ItemsProvider="@_productProvider" Virtualize="true" @ref="grid">
		<PropertyColumn Property="@(c => c.Id)" />
		<PropertyColumn Property="@(c => c.Name)" />
		<PropertyColumn Property="@(c => c.Description)" />
		<TemplateColumn Title="Actions">
			<button class="btn btn-info" @onclick="@(() => EditProduct(context))">Edit</button>
			<button class="btn btn-info" @onclick="@(() => DeleteProduct(context))">Delete</button>
		</TemplateColumn>
	</QuickGrid>
</div>

@code {

	GridItemsProvider<ProductModelDto> _productProvider;
	QuickGrid<ProductModelDto>? grid;
	public ProductModelDto SelectedProduct { get; set; } = new();
	string EditStatus = "Create Product";
	string searchQuery;
	int numResults;

	protected override Task OnInitializedAsync()
	{


		_productProvider = async req =>
		{
			var response = await Http.GetFromJsonAsync<IEnumerable<ProductModelDto>>($"search?name={SearchQuery}");
			if (response is null)
			{
				return GridItemsProviderResult.From(Array.Empty<ProductModelDto>(), 0);
			}

			if (numResults != response.Count())
			{
				numResults = response.Count();
				StateHasChanged();
			}

			return GridItemsProviderResult.From((ICollection<ProductModelDto>)response, response.Count());

		};
		return Task.CompletedTask;
	}

	string SearchQuery
	{
		get => searchQuery;
		set
		{
			searchQuery = value;
			_ = grid.RefreshDataAsync();
		}
	}


	private async Task DeleteProduct(ProductModelDto product)
	{
		var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var token = AuthService.GenerateToken(state);

		var id = product.Id;

		var response = await Http.DeleteAsync($"deleteProduct?productId={id}&token={token}");

	}

	private void EditProduct(ProductModelDto product)
	{
		SelectedProduct = product;
		EditStatus = "Edit Product";
	}

	private void UpdateProduct()
	{
		throw new NotImplementedException();
	}

	private void ResetValues()
	{
		throw new NotImplementedException();
	}

}