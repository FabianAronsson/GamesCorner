@page "/admin/dashboard/manage/products"
@inject HttpClient Http
@inject NavigationManager UriHelper
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using GamesCorner.Shared.DTOs
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Administrator")]
<PageTitle>Product Manager</PageTitle>

<style>
	.form-input {
		width: 20rem;
		padding: 0.75rem 0.75rem 0.75rem 2.5rem;
		color: rgb(17 24 39);
		background-color: rgb(249 250 251);
		border: 1px solid rgb(209 213 219);
		border-radius: 0.5rem;
		outline-offset: 1px;
	}
</style>

<div class="text-white d-flex justify-content-center align-items-center">
<EditForm Model="@SelectedProduct" OnSubmit="@UpdateProduct">
	<div class="my-1 row d-flex justify-content-center align-items-center">
		<div class="col-sm-6 col-lg-3 col-md-6 col-xl-3 m-1 ">
			<label for="id">Id:</label> <br>
				<InputText id="id" type="input" class="form-input" @bind-Value="SelectedProduct.Id" placeholder="Id" disabled />
		</div>
		<div class="col-sm-6 col-lg-3 col-md-6 col-xl-3 m-1">
			<label for="name">Name:</label> <br>
			<InputText id="name" type="input" class="form-input" @bind-Value="SelectedProduct.Name" placeholder="Name" required />
		</div>
		<div class="col-sm-6 col-lg-3 col-md-6 col-xl-3 m-1">
			<label for="description">Description:</label> <br>
			<InputText id="description" type="input" class="form-input" @bind-Value="SelectedProduct.Description" placeholder="Description" required />
		</div>
		<div class="col-sm-6 col-lg-3 col-md-6 col-xl-3 m-1">
			<label for="category">Category:</label> <br>
			<InputText id="category" type="input" class="form-input" @bind-Value="SelectedProduct.Category" placeholder="Category" required />
		</div>
		<div class=" col-sm-6 col-lg-3 col-md-6 col-xl-3 m-1">
			<label for="price">Price</label> <br>
			<InputNumber id="price" type="input" class="form-input" @bind-Value="SelectedProduct.Price" placeholder="Price" required />
		</div>
		<div class=" col-sm-6 col-lg-3 col-md-6 col-xl-3 m-1">
			<label for="InStock">In Stock</label> <br>
			<InputCheckbox id="InStock" type="input" class="form-input" @bind-Value="SelectedProduct.InStock" />
		</div>
		<div class="col-sm-6 col-lg-3 col-md-6 col-xl-3 m-1">
			<label for="ImageUrl">Image Url:</label> <br>
			<InputText id="ImageUrl" type="input" class="form-input" @bind-Value="SelectedProduct.ImageUrl"  required />
		</div>
		<div class="col-sm-6 col-lg-3 col-md-6 col-xl-3 m-1">
			<label for="BannerUrl">Banner-Image Url:</label> <br>
			<InputText id="BannerUrl" type="input" class="form-input" @bind-Value="SelectedProduct.BannerUrl" required />
		</div>
			<div class="col-sm-6 col-lg-3 col-md-6 col-xl-3 m-1">
				<label for="AgeRestriction">Age restriction:</label> <br>
				<InputNumber id="AgeRestriction" type="input" class="form-input" @bind-Value="SelectedProduct.AgeRestriction" required />
			</div>
		<div class="d-flex justify-content-center align-items-center my-3">
			<button type="button" class="btn btn-danger mx-2" @onclick="@(ResetValues)">Reset values</button>
			<button class="btn btn-success mx-2" type="submit">@EditStatus</button>
		</div>
	</div>
</EditForm>
</div>

<div class="my-2 d-flex justify-content-center flex-column align-items-center">
	<div class="inline-block mr-4 my-1">
		<input class="form-input" type="search" autofocus @bind="SearchQuery" @bind:event="oninput" placeholder="Name..." />
	</div>

	<div class="inline-block my-1 text-white">
		Total: <strong>@numResults results found</strong>
	</div>
</div>
<div class="grid d-flex justify-content-center bg-light" tabindex="-1">
	<QuickGrid ItemsProvider="@_productProvider" Virtualize="true" @ref="grid">
		<PropertyColumn Property="@(c => c.Id)" />
		<PropertyColumn Property="@(c => c.Name)" />
		<PropertyColumn Property="@(c => c.Description)" />
		<TemplateColumn Title="Actions">
			<button class="btn btn-info" @onclick="@(() => EditProduct(context))">Edit</button>
			<button class="btn btn-info" @onclick="@(() => DeleteProduct(context))">Delete</button>
		</TemplateColumn>
	</QuickGrid>
</div>

@code {

	GridItemsProvider<ProductModelDto> _productProvider;
	QuickGrid<ProductModelDto>? grid;
	public ProductModelDto SelectedProduct { get; set; } = new();
	string EditStatus = "Create Product";
	string searchQuery;
	public List<ProductModelDto> _products { get; set; } = new();
	int numResults;

	protected override Task OnInitializedAsync()
	{


		_productProvider = async req =>
		{
			var response = await Http.GetAsync($"search?name={SearchQuery}");

			if (response.IsSuccessStatusCode)
			{
				_products = await response.Content.ReadFromJsonAsync<List<ProductModelDto>>();
			}

			else
			{
				numResults = 0;
				StateHasChanged();
				return GridItemsProviderResult.From(Array.Empty<ProductModelDto>(), 0);

			}

			if (numResults != _products.Count())
			{
				numResults = _products.Count();
				StateHasChanged();
			}
			

			return GridItemsProviderResult.From(_products, _products.Count());

		};
		return Task.CompletedTask;
	}

	string SearchQuery
	{
		get => searchQuery;
		set
		{
			searchQuery = value;
			_ = grid.RefreshDataAsync();
		}
	}


	private async Task DeleteProduct(ProductModelDto product)
	{
		
		var id = product.Id;

		var response = await Http.DeleteAsync($"deleteProduct?productId={id}");
		_ = grid.RefreshDataAsync();

	}

	private void EditProduct(ProductModelDto product)
	{
		SelectedProduct = product;
		EditStatus = "Edit Product";
	}

	private async Task UpdateProduct()
	{
		if (SelectedProduct.Price == 0 )
		{
			return;
		}
 
		if (EditStatus == "Edit Product")
		{
			await Http.PutAsJsonAsync($"updateProduct?productId={SelectedProduct.Id}", SelectedProduct);
		}
		else
		{
			SelectedProduct.Id = Guid.NewGuid().ToString();
			await Http.PostAsJsonAsync($"createProduct", SelectedProduct);
		}
 
		_ = grid.RefreshDataAsync();
		ResetValues();
	}

	private void ResetValues()
	{
		SelectedProduct = new ProductModelDto();
		EditStatus = "Create Product";
	}

}