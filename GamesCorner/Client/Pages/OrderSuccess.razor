@page "/OrderSuccess/{session_id}"
@using GamesCorner.Client.Services.CartService;
@using GamesCorner.Shared.Dtos;
@using DataAccess.Models.Enums
@inject IHttpClientFactory HttpClientFactory
@inject ICartService cartService

<div class="progressbar">
	<div class="circle1"></div>
	<div class="content1">Shopping Cart</div>
	<div class="line"></div>
	<div class="circle2"></div>
	<div class="content1">Order confirmation</div>
</div>
<div class="container d-flex flex-grow-1 align-content-center justify-content-center">
	<div class="row">
		<div class="col-12">
			<div class="card border-0 bg-dark m-4 p-4">
				@if (success == true)
				{
					<p class="successCheck">✓</p>
					<h1 class="text-light">Success</h1>
					<p class="text-light">We received your purchase request;<br /> we'll be in touch shortly!</p>

				}
				else if (success == false)
				{
					<p class="failedCheck mx-auto">❌</p>
					<h1 class="text-light mx-auto">Something went wrong</h1>
				}

			</div>

		</div>
	</div>
</div>






@code {

	[Parameter] public string? session_id { get; set; }
	public bool success = true;
	public OrderDto order { get; set; } = new();


	protected override async Task OnInitializedAsync()
	{
		await CompleteSuccessfullOrder();
	}

	private async Task CompleteSuccessfullOrder()
	{
		var client = HttpClientFactory.CreateClient("public");

		var cart = await cartService.GetCartItems();
		order.Products = new();
		order.Products.AddRange(cart);
		order.Id = Guid.NewGuid().ToString();
		order.OrderStatus = OrderStatus.Completed;

		var response = await client.PutAsJsonAsync($"orderSuccess?session_id={session_id}", order);

		Console.WriteLine(response);
		if (response.IsSuccessStatusCode)
		{
			await cartService.EmptyGuestCart();
			success = true;
			Console.WriteLine("success");
		}
		else
		{
			success = false;
			Console.WriteLine("failure");
		}

	}
}


}
